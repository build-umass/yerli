schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createTestmodel(input: CreateTestmodelInput!): Testmodel
  deleteTestmodel(input: DeleteTestmodelInput!): Testmodel
  updateTestmodel(input: UpdateTestmodelInput!): Testmodel
}

type Query {
  getTestmodel(id: ID!): Testmodel
  listTestmodels(filter: TableTestmodelFilterInput, limit: Int, nextToken: String): TestmodelConnection
}

type Subscription {
  onCreateTestmodel(id: ID, title: String): Testmodel @aws_subscribe(mutations : ["createTestmodel"])
  onDeleteTestmodel(id: ID, title: String): Testmodel @aws_subscribe(mutations : ["deleteTestmodel"])
  onUpdateTestmodel(id: ID, title: String): Testmodel @aws_subscribe(mutations : ["updateTestmodel"])
}

type Testmodel {
  id: ID!
  title: String
}

type TestmodelConnection {
  items: [Testmodel]
  nextToken: String
}

input CreateTestmodelInput {
  title: String
}

input DeleteTestmodelInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableTestmodelFilterInput {
  id: TableIDFilterInput
  title: TableStringFilterInput
}

input UpdateTestmodelInput {
  id: ID!
  title: String
}
